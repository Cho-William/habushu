package org.bitbucket.cpointe.habushu;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.bitbucket.cpointe.habushu.exec.PoetryCommandHelper;
import org.bitbucket.cpointe.habushu.util.HabushuUtil;

/**
 * Publishes the distribution archives generated by {@link BuildArchiveMojo} to
 * the configured PyPI repository. {@link PublishToPyPiRepoMojo} leveages Poetry
 * to support publishing to private PyPI repositories as well as the official
 * PyPI repository. If publishing to a private PyPI repository, both
 * {@link #pypiRepoId} and {@link #pypiRepoUrl} <b>MUST</b> be specified, and it
 * is expected that the relevant username/password credentials are configured in
 * a settings.xml {@literal <server>} entry that has an {@literal <id>} that
 * aligns with the provided {@link #pypiRepoId}. If neither {@link #pypiRepoId}
 * nor {@link #pypiRepoUrl} are provided, it is assumed that the archives will
 * be published to the official PyPI repository.
 *
 */
@Mojo(name = "publish-to-pypi-repo", defaultPhase = LifecyclePhase.DEPLOY)
public class PublishToPyPiRepoMojo extends AbstractHabushuMojo {

    /**
     * Specifies the {@literal <id>} of the {@literal <server>} element declared
     * within the utilized settings.xml configuration that represents the private
     * PyPI repository to which this project's archives will be published. This
     * property is <b>REQUIRED</b> if publishing to a private PyPI repository that
     * requires authentication - it is expected that the relevant
     * {@literal <server>} element provides the needed authentication details.
     */
    @Parameter(property = "pypiRepoId", required = false)
    protected String pypiRepoId;

    /**
     * Specifies the URL of the private PyPI repository to which this project's
     * archives will be published. This property is <b>REQUIRED</b> if publishing to
     * a private PyPI repository.
     */
    @Parameter(property = "pypiRepoUrl", required = false)
    protected String pypiRepoUrl;

    @Override
    public void execute() throws MojoExecutionException, MojoFailureException {
	PoetryCommandHelper poetryHelper = createPoetryCommandHelper();
	List<Pair<String, Boolean>> publishToPrivateRepoArgs = Collections.emptyList();

	if (StringUtils.isNotEmpty(pypiRepoId) && StringUtils.isNotEmpty(pypiRepoUrl)) {
	    String username = HabushuUtil.findUsernameForServer(settings, pypiRepoId);
	    String password = HabushuUtil.decryptServerPassword(settings, pypiRepoId);

	    if (StringUtils.isEmpty(username) || StringUtils.isEmpty(password)) {
		throw new MojoExecutionException(String.format(
			"Please ensure that both <username> and <password> are provided for the <server> with <id> %s in your settings.xml configuration!",
			pypiRepoId));
	    }

	    getLog().info(String.format("Adding repository configuration to poetry.toml for %s at %s", pypiRepoId,
		    pypiRepoUrl));
	    poetryHelper.execute(
		    Arrays.asList("config", "--local", String.format("repositories.%s", pypiRepoId), pypiRepoUrl));
	    publishToPrivateRepoArgs = new ArrayList<Pair<String, Boolean>>();
	    publishToPrivateRepoArgs.add(new ImmutablePair<String, Boolean>("--repository", false));
	    publishToPrivateRepoArgs.add(new ImmutablePair<String, Boolean>(pypiRepoId, false));
	    publishToPrivateRepoArgs.add(new ImmutablePair<String, Boolean>("--username", false));
	    publishToPrivateRepoArgs.add(new ImmutablePair<String, Boolean>(username, false));
	    publishToPrivateRepoArgs.add(new ImmutablePair<String, Boolean>("--password", false));
	    publishToPrivateRepoArgs.add(new ImmutablePair<String, Boolean>(password, true));
	}

	getLog().info(String.format("Publishing archives to %s",
		StringUtils.isNotEmpty(pypiRepoUrl) ? pypiRepoUrl : "official PyPI repository"));

	if (!publishToPrivateRepoArgs.isEmpty()) {
	    publishToPrivateRepoArgs.add(0, new ImmutablePair<String, Boolean>("publish", false));
	    poetryHelper.executeWithSensitiveArgsAndLogOutput(publishToPrivateRepoArgs);
	} else {
	    poetryHelper.executeAndLogOutput(Arrays.asList("publish"));
	}
    }

}
