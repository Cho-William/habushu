package org.bitbucket.cpointe.habushu.exec;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.tuple.Pair;
import org.apache.maven.plugin.MojoExecutionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Facilitates the execution of Poetry commands.
 */
public class PoetryCommandHelper {

    private static final String POETRY_COMMAND = "poetry";
    private static final Logger logger = LoggerFactory.getLogger(PoetryCommandHelper.class);

    private File workingDirectory;

    public PoetryCommandHelper(File workingDirectory) {
	this.workingDirectory = workingDirectory;
    }

    /**
     * Returns a boolean value indicating whether Poetry is installed.
     */
    public boolean isPoetryInstalled() {
	try {
	    ProcessExecutor executor = createPoetryExecutor(Arrays.asList("--version"));
	    executor.executeAndGetResult(logger);
	} catch (Throwable e) {
	    return false;
	}
	return true;
    }

    /**
     * Returns whether the specified dependency package is installed within this
     * Poetry project's virtual environment (and pyproject.toml).
     * 
     * @param packageName
     * @return
     */
    public boolean isDependencyInstalled(String packageName) {
	try {
	    execute(Arrays.asList("show", packageName));
	} catch (Throwable e) {
	    return false;
	}
	return true;

    }

    /**
     * Installs the specified package as a development dependency to this Poetry
     * project's virtual environment and pyproject.toml specification.
     * 
     * @param packageName
     */
    public void installDevelopmentDependency(String packageName) throws MojoExecutionException {
	execute(Arrays.asList("add", packageName, "-D"));
    }

    /**
     * Executes a Poetry command with the given arguments, logs the executed
     * command, and returns the resultant process output as a string. This method
     * should be utilized when performing downstream logic based on the output of a
     * Poetry command, or it is desirable to not show the command's generated
     * stdout.
     * 
     * @param arguments
     * @return
     * @throws MojoExecutionException
     */
    public String execute(List<String> arguments) throws MojoExecutionException {
	if (logger.isInfoEnabled()) {
	    logger.info("Executing Poetry command: {} {}", POETRY_COMMAND, StringUtils.join(arguments, " "));
	}
	ProcessExecutor executor = createPoetryExecutor(arguments);
	return executor.executeAndGetResult(logger);
    }

    /**
     * Executes a Poetry command with the given arguments, logs the executed
     * command, logs the stdout/stderr generated by the process, and returns the
     * process exit code. This method should be utilized when it is desirable to
     * immediately show all of the stdout/stderr produced by a Poetry command for
     * diagnostic purposes.
     * 
     * @param arguments
     * @return
     * @throws MojoExecutionException
     */
    public int executeAndLogOutput(List<String> arguments) throws MojoExecutionException {
	if (logger.isInfoEnabled()) {
	    logger.info("Executing Poetry command: {} {}", POETRY_COMMAND, StringUtils.join(arguments, " "));
	}
	ProcessExecutor executor = createPoetryExecutor(arguments);
	return executor.executeAndRedirectOutput(logger);
    }

    /**
     * Similar to {@link #executeAndLogOutput(List)}, except the executed Poetry
     * command that is logged obfuscates/masks any given command arguments that are
     * marked as sensitive. This method should be utilized if any Poetry command
     * line arguments contain sensitive values that are not desirable to log, such
     * as passwords.
     * 
     * @param argAndIsSensitivePairs
     * @return
     * @throws MojoExecutionException
     */
    public int executeWithSensitiveArgsAndLogOutput(List<Pair<String, Boolean>> argAndIsSensitivePairs)
	    throws MojoExecutionException {
	if (logger.isInfoEnabled()) {
	    List<String> argsWithSensitiveArgsMasked = argAndIsSensitivePairs.stream()
		    .map(pair -> pair.getRight() ? "XXXX" : pair.getLeft()).collect(Collectors.toList());
	    logger.info("Executing Poetry command: {} {}", POETRY_COMMAND,
		    StringUtils.join(argsWithSensitiveArgsMasked, " "));
	}
	ProcessExecutor executor = createPoetryExecutor(
		argAndIsSensitivePairs.stream().map(Pair::getLeft).collect(Collectors.toList()));
	return executor.executeAndRedirectOutput(logger);
    }

    protected ProcessExecutor createPoetryExecutor(List<String> arguments) {
	List<String> fullCommandArgs = new ArrayList<>();
	fullCommandArgs.add(POETRY_COMMAND);
	fullCommandArgs.addAll(arguments);
	return new ProcessExecutor(workingDirectory, fullCommandArgs, Platform.guess(), null);
    }
}
